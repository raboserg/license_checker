cmake_minimum_required (VERSION 3.8)
#set(VCPKG_TARGET_TRIPLET "x64-windows")
include(path.cmake)
project ("license_checker")

set(LINK "STATIC")
set(VARIANT "DEBUG")
include(build.cmake)

message(STATUS "$$$$$ CMAKE_CROSSCOMPILING - ${CMAKE_CROSSCOMPILING}")
message(STATUS "$$$$$ CMAKE_INCLUDE_PATH - ${CMAKE_INCLUDE_PATH}")
message(STATUS "$$$$$ CMAKE_LIBRARY_PATH - ${CMAKE_LIBRARY_PATH}")

#set(Boost_NO_SYSTEM_PATHS    ON)
#set(Boost_USE_STATIC_LIBS    OFF)  # only find static libs
set(Boost_USE_DEBUG_LIBS      ON)
#set(Boost_USE_RELEASE_LIBS   OFF)  # only find release libs
#set(Boost_USE_MULTITHREADED   ON)
#set(Boost_USE_STATIC_RUNTIME OFF)

if(CMAKE_HOST_WIN32)
    find_package(Boost 1.71.0 COMPONENTS filesystem REQUIRED)
	#find_package(Boost 1.71.0 COMPONENTS system filesystem REQUIRED)
	find_library(P7_LIB NAMES P7x64d.dll)
	#find_package(P7_LIB NAMES P7x64d.dll)
elseif(CMAKE_HOST_UNIX)
    set(CMAKE_LIBRARY_PATH_ ${CMAKE_LIBRARY_PATH})
    set(CMAKE_INCLUDE_PATH_ ${CMAKE_INCLUDE_PATH})
    set(CMAKE_LIBRARY_PATH ${DEFAULT_UNIX_BOOST_DIR}/stage/lib)
    set(CMAKE_INCLUDE_PATH ${DEFAULT_UNIX_BOOST_DIR})
#    set(BOOST_INCLUDEDIR ${DEFAULT_UNIX_BOOST_DIR})
#    set(BOOST_LIBRARYDIR ${DEFAULT_UNIX_BOOST_DIR}/stage/lib)
    find_package(Boost COMPONENTS system)
    set(CMAKE_LIBRARY_PATH ${DEFAULT_UNIX_LIBP7_DIR}/Binaries)
    find_library(P7_LIB NAMES P7)
    message("NOT FOUNDNOT FOUNDNOT FOUND NOT FOUND = ${P7_LIB}")
    file(COPY ${P7_LIB} DESTINATION ${CMAKE_CURRENT_BINARY_DIR})
    # sudo ln -s libP7.so /usr/local/lib/libP7.so.2
    exec_program("ln -s ${P7_LIB} ${CMAKE_CURRENT_BINARY_DIR}/libP7.so.2")
    set(CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH_})
    set(CMAKE_INCLUDE_PATH ${CMAKE_INCLUDE_PATH_})
    find_library(SSL_LIB NAMES ssl PATHS ${CMAKE_LIBRARY_PATH})
    find_library(CRYPTO_LIB NAMES crypto PATHS ${CMAKE_LIBRARY_PATH})
    find_library(P7_LIB NAMES P7x64d.dll PATHS ${CMAKE_LIBRARY_PATH})
endif()

if(NOT DEFINED Boost_FOUND)
	message(FATAL_ERROR "Boost NOT FOUND")
endif()

message(STATUS "Boost_INCLUDE_DIRS - ${Boost_INCLUDE_DIRS}")
message(STATUS "PROJECT_BINARY_DIR - ${PROJECT_BINARY_DIR}")
message(STATUS "CMAKE_BINARY_DIR - ${CMAKE_BINARY_DIR}")
message(STATUS "Boost_LIBRARIES - ${Boost_LIBRARIES}")
message(STATUS "CMAKE_MODULE_PATH - ${CMAKE_MODULE_PATH}")
message(STATUS "CMAKE_INCLUDE_PATH - ${CMAKE_INCLUDE_PATH}")
message(STATUS "RUNTIME - ${RUNTIME}")

if(CMAKE_HOST_WIN32)
	set(SOURCE_LIST application.cpp application.h service.h stdafx.h tools.h)
	set(LINK_LIBS client license eventsink ${Boost_LIBRARIES})
	set(INCLUDE_DIRS client license event_sink_win ${Boost_INCLUDE_DIRS} ${VCPKG_DIR}/include/P7 )
	add_executable(${PROJECT_NAME} ${SOURCE_LIST})
	target_compile_definitions(${PROJECT_NAME} PRIVATE -D_WIN32_WINNT=0x0601 -D_WINSOCK_DEPRECATED_NO_WARNINGS)
	add_subdirectory("event_sink_win")
	target_link_libraries(${PROJECT_NAME} PUBLIC ${LINK_LIBS} ${P7_LIB})
	target_include_directories(${PROJECT_NAME} PRIVATE ${INCLUDE_DIRS})
elseif(CMAKE_HOST_UNIX)
	set(SOURCES_LIST application.cpp application.h stdafx.h tools.h)
	set(LINK_LIBS client license eventsink pthread ${Boost_LIBRARIES} ${SSL_LIB} ${CRYPTO_LIB} dl)
	set(INCLUDE_DIRS client license event_sink_linux ${Boost_INCLUDE_DIRS} ${DEFAULT_LIBP7_BOOST_DIR}/Headers)
    add_executable(${PROJECT_NAME} ${SOURCES_LIST})
	add_subdirectory("event_sink_linux")
    target_link_libraries(${PROJECT_NAME} PUBLIC ${LINK_LIBS} ${P7_LIB})
    target_include_directories(${PROJECT_NAME} PUBLIC ${INCLUDE_DIRS})
endif()

add_subdirectory("client")
add_subdirectory("license")
add_subdirectory("parser")

if(CMAKE_HOST_WIN32)
	file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/resources/lic_check_w.ini DESTINATION ${CMAKE_CURRENT_BINARY_DIR})
elseif(CMAKE_HOST_UNIX)
	file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/resources/lic_check_l.ini DESTINATION ${CMAKE_CURRENT_BINARY_DIR})
endif()
